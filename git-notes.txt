Lets begin the cinema:-
*************************

what is git ?
1. git is vcs,scm,vcm 
scm : source code management
vcs : version control system
vcm : version control mechanism

version : peice of code that changes daily.

tool other than git :-
**********************
we can use, svn (sub-version) or git.
svn(tortoise)

Difference B/w SVN AND GIT
****************************
svn : sub-version
git : git scm tool

svn is centralised.
git is distributed.

svn old conventions.
git modern conventions.

common command:-
*****************
git status 
svn status
git checkout
svn checkout
git dance
svn dance
git something
svn something
Note :: svn and git both uses same type of command. 
$ <git or svn> <command>

Important Key Points about Github
****************************************
https://github.com/awnishmmg/repo-name.git
https://github.com/awnishmmg/PHP-Documentation.git => public
https://github.com/Evilshze/demo-repo.git => private 404 not exist


Important Information Related to git repo
***********************************************
1. Every git repo has its permission.
2. Every git Repo will have readme file
3. Every git repo has visibility status
	1. Public repo : any body can see, and any body can download(clone->origin)
	or any body can fork(clone->upstream), and any body can watch.
	
	2. private 
4. Every git Repo may have or may not have License.
5. Every Repo will have its own owner and its own branch
	by default branch name is master
	and aftery August-2021 Master name was changed to 
	main in github.
	
	Diff git clone and git fork
	***************************
	git clone code cloud to local download
	private and public repo 
	
	git fork code one github account ----> 2nd git account -->
	download
	public repo.
	
	How to intialise a variable in c:-
	*********************************
	
	int a = 20; //declaration & intialisation.
	
	
	printf(" a = %d",a);  => value print a 
	a variable use 
	
	similarly,
	before you can use, any repo(private or public ) it has to be intialised.
	
	Intialisation in github & intialisation in local
	*****************************************************
	Intialisation in github
	***********************
	steps are :-
	1. Repo name ---> owner ---> master branch or main branch.
	2. Repo Description (optional)
	3. visibility mode : private or public 
	4. readme.md
	5. .gitignore
	6. license
	   Any specific branch : bydefault main ---> change ---> master
	   
    Intialisation in local
	***********************
    before you commit(final save) owner information is mendatory.
	
	git will ask who are you before commit
	*****************************************
	There two ways of adding author information
	1. local => multiple user --> local to the user
	2. global => single user ---> globally.
	
	Consider, system
	guest-1 local user
	guest-2 local user
	admin local user
	
	if there is one user  then you have set author/owner information globally.
	
	How to Add and Show global author username and email
	*****************************************************
	$ git config --global user.name
	$ git config --global user.email
	
	for locally
	***************
	$ git config --local user.name
	$ git config --local user.email
	
	Note :: if you supply the value, then set or if not 
	it will show.
	
   Note :: for string value if space seperated string then in commmand
   line "" is mendatory
   
   Every space wala sentence should be inside "" key ander
   
   Adding Author/owner information globally
   *******************************************
   $ git config --global user.name "awnish kumar"
   $ git config --global user.email "awnishmmg.a41@gmail.com"
   
   Adding Author/owner information locally
   *******************************************
   $ git config --local user.name "awnish kumar"
   $ git config --local user.email "awnishmmg.a41@gmail.com"
   
   if Already Added, author information then we will remove it
   windows => credential manager
   1. web credential 
   2. windows credential
   All server based credential(userId + Password) will be stored 
   here only.
   
   How to create workspace in git 
   *******************************
   what is workspace?
   work-space : is a folder where, all your code is kept, and you 
   are current working. (cwd) : current working directory
   cwd is only called workspace.
   
   $ mkdir foldername
   $ cd foldername
   $ pwd -> path/to/cwd
   $ ls -lart
   or 
   $ ls
   
   How to intialise git at local
   ***********************************
   $ git init
   
   How to see git branch name at local
   *************************************
   $ git config --list --show-origin
   or 
   $ git config --list
                [     ]
				    |
					|
					options or flags or conditions or arguments
					
   
   --show-origin : full path show 
   
   How to change, the init.defaultbranch name from master to main
   **************************************************************
   1. linux or terminal
    cmd => launch => administrator
	change the permission using command
	chmod 777 path/to/folder
	
   windows :- 
   powershell or cmd => launch => administrator run 
   cd etc/
   chmod 777 path/to/folder
   when, r+w+x+ permission
   properties>security>permission>edit>allow permission 
   full access [tick]
   Read [tick]
   execute [tick]
   write [tick]
   apply > ok > ok
   chmod 777 path/to/folder
   $ git config --system init.defaultbranch "main"
   
   Note :: git init is done when you are sure that you are going to create
   some files.
   Ask Two main Question with yourself
   ***************************************
   1. Is this my correct cwd ?
    if not then run cd command and move to correct,
   
   2. make sure you have few files.
   Note :: no commit will be allowed without any file.
   
   How to create empty files
   ******************************
   $ touch index.html about.html gallery.html
   $ ls -lart 
   or 
   $ ls
   
   write some code ...
   
   How to tracking of files
   **************************
   or
   How to add files to stage
   ****************************
   $ git add filename
   
   for entire folder
   *********************
   $ git add .
     
   How to check tracking
   *************************
   $ git status
   Note :: You can run git status at any mode, any situation any,
   way and any time
   
   $ git init
   Note :: You have to git init, for first time, you to convert
   cwd => myproject (workspace) => main repository
   Note :: local git repo

  Details about .git folder
*******************************
it is main hidden folder
$ ls 
$ cd .git 
$ git branch

Note :: branch, is concept which is created when multiple users 
are working together.

How to see branch list
*************************
$ git branch
dev
master or main
(*)tester <-------current branch name
design

Note :: $ --------->(main) current branch name

branches of two types
***********************
1. local : $ git branch
2. origin(github or cloud ) : $ git branch --all

How the local branch look like
******************************
$ git branch

---------output------------
dev
master or main
(*)tester <-------current branch name
design
---------output------------

How the server branch look like
******************************
$ git branch --all
---------output------------
dev
master or main
(*)tester <-------current branch name
design
refs/remotes/origin/main
refs/remotes/origin/design
refs/remotes/origin/tester
refs/remotes/origin/production
refs/remotes/origin/dev
refs/remotes/origin/release
refs/remotes/origin/manager

---------output------------

Note :: branch cannot be created until first commit 
or first pull or clone

first commit -> saving from local to local .git repository
file | -------> stage --------> final commit | .git repo.
As soon as, Automatically,  commit your recent commit will
become HEAD of that branch.

for first commit file should be at, stage 
*****************************************
$ git add filename 
or 
$ git add .

How to any file to cache memory or unstage
********************************************
$ rm -r filename or foldername
$ git rm --cached <filename> : unstage => No Tracking

How to track the modified 
*******************************
$ git status
s: status 
s: stage

Note :: Once you are sure and 
you are done with your task,

How to commit
****************
After modified stage  you have 
two options
1. unstage
2. commit 

$ git commit -m "Added,changes in index and about file"
This message will be commit Message after commit
you will get, commit Id : 40Bit

once commit
1. Head is generate
2. commit Id is generated
3. file will automatically unstaged --> untracked mode

During commit 
*******************
versioning happens
and mode is changed by git

What happens during versioniing
*********************************
table : date and time |
author information : 
commit Id , message also code

Add [+] insertions : green
del [-] deletion : red
NC  [0] unchanged : default white.
	Nc => No,changes.
	
$ git status
$ Nothing to commit working
  tree clean.
  
How to see commmit
***********************
$ git log

commit Id
Head information:
Author Information:
log End :q 
or ctrl + c

How to see code of commit:-
*****************************
$ git diff <branchname>

or 
$ git diff <commitID>
if branch same you want to 
code of any other commit
you will be in detach mode

new branch for older commit created =>
detached HEAD Branch.

How to create branch:-
************************
$ git branch <branchname>
How to move from one branch to another branch
**********************************
$ git checkout branchname
or 
$ git checkout commitID

How to delete branch
************************
Note :: deleting the branch will delete all commits.
and impossible to undo.

$ git branch --delete <branchname>

How to final checkout
***************************
$ git checkout <commitId or branchname>

1) Difference B/w detached HEAD and Branch
2) what is HEAD. : current mey kiya latest commit or recent commit kehlata, HEAD
detached HEAD : recent commits kiya gya checkout head sey detach ho jata.
and detached HEAD undo : checkout to any commit branch.

How to get deleted files
***************************
$ git status
$ git diff
$ git log => commitId or recent-branch-of-commit
$ git checkout commitId
or
$ git checkout branch
or
$ git checkout . in current branch.


How to git push
******************
1. what is origin : main cloud server at github,gitlab,bitbucket or bitkeeper or heruko(salesforce company)
2. origin is recogined as, url
	1. https : https://github.com/username/repo.git => 80
	2. ssh :(secure shell)
	3. git cli*(Administrator)
	
	what happens in ssh (putty)?
	1. connection is set up B/w direct client to server using shell or terminal.
	There are two ways of connecting server using ssh
	**************************************************
	1. using credential,hostname(IP),port 
		1. hostname of IP : cmd => ping url without https/http 
		for eg : cmd => ping google.com
		for eg : cmd => ping facebook.com
		for eg : cmd => ping gmail.com
		or 
		https://dnslookup.online/
		dns lookup
		dns checker
		mxtoolbox 
		All information related to server and IP can be found using 
		above website which will include, dns record, dns server, network Ip,
		hosting server, nameserver ....etc etc
		
		
	2. by-default port : 
	    ftp protocol : 21
		sftp protocol : 22
	    Note :: if port not provided, you have to default port for public server.
		Note :: if network is private , then there may a chance that server 
		may use there own port number
		for connection, you must connect to private port.
		public smtp server : 25
		private server : 2096 <private port>
		
		protocol => port assign => IANA 
		private port will be given server admin.
		
		3. username : access from server admin.
		4. password : access from server admin.
		
  2nd method :-
  ***********
  1. using ssh keys or 
		1. public : automatically exchange b/w client and server.
		2. private : username and passwod (private key) 
		install ---> putty ---> open puttygen
		generate token
				---> shake mouse cursor.
				---> shaking(algorithm)+machine(macId) =>
				very very long 
				1. public  => rsa
				2. private => rsa
				
		Client shell <-------------------------------> Server Shell
		[data]-----------------> send --------------------> [target]
		      ------------------> Encrypt ------------------> public key
			  <-------------------private key -----------------
			  
	  How to add shh key to git repo
	  **********************************
	  1. avatar icon > settings > under repository > developyment
																					ssh keys => Add shh key and Add your public-rsa key add.
												
							
  2. token :-
  ****************  
    if you generate, personalised token then instead of adding usernmae
	and password(private key) you can one time add, token 
	and it will be saved for 30 days and you can directly commit to the server.
	
	if you save this token it will stored in,
	credential manager.
	
	How to set token
	*****************
	1. github > avator icon > settings > developer settings > personalised token > classic token > generate token 
	1. title 
	2. expiry 
			7 days
			30 days
			90 days
			Note :: This expiry is by-default 30 days
			after that it expires most companies, are going to set expiry
			according to there, sprint.
			
			set all the permission
			1. shh key 
			2. read write, commits, deployement, allow sharing, ...branch
			creation.
			
			generate 
				1. please pleas please copy at once because this token
				will be hidden as soon as you refresh, hence keep it very secure but but, if you lose it 
				delete and regenerate.
				
	How to push code to server or origin
	*************************************
	1. normal push 
	2. force push
	
	How to normally push the code 
	******************************
	$ you to commit and you to check out to the branch for push
	
	$ git commit -m "something"
	$ git checkout to branch.
	$ git push origin <branch>
	
	How to force push the code 
	******************************
	$ git push -f origin <branch-name>
	Eg :
	$ git branch
	1. dev
	2. master 
	3. tester 
	
	
	if tester push
	*************
	$ git push -f origin tester
	
	if master push
	*************
	$ git push -f origin master
	
	if dev push
	*************
	$ git push -f origin dev.
	
	Before push your origin must be ready
	****************************************
	origin => url

    system client 
    connection
    server (remotly)
    $ git remote -v
         1. mode push 
         2. fetch mode
		 
   How to set up origin
   *********************
   $ git remote add origin <repo-url>
   to remove
   $ git remote remove origin
    
   Again check remote or origin version
   **************************************
    $ git remote -v
	
	
   
   https://github.com/Evilshze/techpile-demo.git
   or
   https://github.com/Evilshze/techpile-demo.git
   
   
	
	
	https://github.com/Evilshze/git-notes-by-awnishkumar/
	
	https://github.com/awnishmmg/php-documentation
	
	
	
	
	
	
	
				
			
			
	
	
	
		
		
		
		
		
	
	
	



 





































































	























































 








































  
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
	
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
 
 
   
   
   
   
   
   
   
   
   
   
   
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	
	
	
	
	   
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
































